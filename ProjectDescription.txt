//Zachary Teutsch
//
//CSCI 1300
//
//Conway's Game of Life
//Project Description

Conway’s Game of life is a cellular simulation designed in 1970.
It follows a simple set of algorithmic rules to determine whether a cell “lives” or “dies.”
The rules are as follows:

	1. Fewer than 2 alive neighbors, the cell dies

	2. 2 alive neighbors, the cell survives

	3. 3 alive neighbors, the cell either a) survives or b) comes alive

	4. More than 3 alive neighbors, the cell dies


My program creates a version of Conways’ Game of Life and consists of two classes: the dish class 
and the cell class.

1)Dish

The dish’s primary function is to hold the cells. Its primary data member is a 20 by 20 2d array of cells.
All the logic for whether or not a cell surives is stored in the functions of the dish class.
The NextGeneration() function determines the next state of each cell.
A call to advance() advances the cells to their next state.
The printDish() function prints the state of the dish to the command line.
The print dish prints the appropriate deadChar or liveChar value.
It also prints a header that contains the generation number and the number of live cells in the dish (out of 200).

2)Cell

The cell class is much simpler. The cell has a bool data member for both its current state and its next state.
Its only functions are setters for these values and a next() function that sets the current value to the next value.
The cell is basically a storage unit for true/false states that prevents a future state from corrupting the 
evaluation of the rest of the disk.


My game of life opens with a simple menu that gives the user three options:

1) Start with a pseudo-random state.
2) Load an example state.
3) Load a saved state.

The psuedo random state option asks the user if they would like to auto-advance (recursive advance on 
a delay) or controlled advance (enter the number of generations you would like to advance.)
The user then has to enter a seeding number, this is fed to srand() function of <cstdlib> to seed the
rand() function. The generated value are used to assign dead or alive values to each cell in the dish.
If the user selected auto advance, the program will advance 1 generation every ~2 seconds. The program
will call to printDish() after each advance, and the user can see how the dish changes with each
generation over time.
The controlled advance option prompts the user to enter an integer to advance the dish. The program
will then call to advance(n) and print the status of the dish at the end generation. The user
can then enter another generation value or -1 to quit or 0 to save.


Loading an example state allows to see some of the cool patterns GOL has to offer. I pre-wrote and
saved several files in the examples folder for the user to load in. Once selected, the examples
execute using the auto-advance option.

The parsing format I used for saving is lines of ’t’ for live cells and ‘f’ for dead cells.
The program can read these values and set each cell accordingly.

The last option is to load a saved file. This allows the user to load saves from the first option
of the menu. It uses the same parsing format as the example state and allows you to revisit
states of the dish.








